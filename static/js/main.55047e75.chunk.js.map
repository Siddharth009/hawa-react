{"version":3,"sources":["components/home/MainBody.jsx","components/home/TimelineComponent.js","components/home/AboutMe.jsx","components/Footer.jsx","components/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["MainBody","className","href","role","aria-label","target","rel","style","width","TimelineComponent","contentStyle","background","color","contentArrowStyle","borderRight","date","iconStyle","Component","AboutMe","id","Footer","useState","backgroundColor","bgStyle","Navbar","props","isTop","type","data-toggle","data-target","aria-controls","aria-expanded","process","Home","App","basename","showNavigationbar","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4WA2EeA,EApEE,WAoBf,OACE,6BACE,yBAEEC,UAAU,6IAGV,yBAAKA,UAAU,0CACb,wBAAIA,UAAU,aAAd,yBAGA,kBAAC,IAAD,CAAQA,UAAU,QAAlB,8GAIA,6BACA,4CATF,IAS0B,6BACxB,uBACEA,UAAU,+BACVC,KAAK,2CACLC,KAAK,SACLC,aAAW,oBACXC,OAAO,SACPC,IAAI,sBACJC,MAAO,CACLC,MAAO,UARX,aAaA,mCACA,uBACEP,UAAU,+BACVC,KAAK,WACLC,KAAK,SACLC,aAAW,gBACXG,MAAO,CACLC,MAAO,UANX,a,uCCRKC,G,6KA5CP,OACI,kBAAC,mBAAD,KACI,kBAAC,0BAAD,CACIR,UAAU,kCACVS,aAAc,CAAEC,WAAY,oBAAqBC,MAAO,QACxDC,kBAAmB,CAAEC,YAAa,gCAClCC,KAAK,cAIL,sCAIJ,kBAAC,0BAAD,CACId,UAAU,kCACVc,KAAK,gBAIL,oEAIJ,kBAAC,0BAAD,CACId,UAAU,kCACVc,KAAK,6BAKL,mDAIJ,kBAAC,0BAAD,CACIC,UAAW,CAAEL,WAAY,mBAAoBC,MAAO,e,GAtCxCK,cCwCjBC,EAvCC,WAEd,OACE,yBAAKC,GAAG,UAAUlB,UAAU,iCAC1B,yBAAKA,UAAU,iCACb,yBAAKA,UAAU,OAEb,yBAAKA,UAAU,6CACb,wBAAIA,UAAU,8BAAd,oBACA,kBAAC,EAAD,OAGF,yBAAKA,UAAU,YACb,wBAAIA,UAAU,8BAAd,YAEA,uBAAGA,UAAU,oBAAb,2EAGA,uBAAGA,UAAU,oBACX,uBAEEA,UAAU,8BACVC,KAAK,IACLG,OAAO,SACPC,IAAI,sBACJH,KAAK,SACLC,aAAW,cAPb,oB,OCDCgB,EArBA,WAAO,IAAD,EACDC,mBAAS,CAAEC,gBAAiB,YAAvCC,EADY,oBAGnB,OACE,4BAAQhB,MAAOgB,EAAStB,UAAU,eAChC,+CACA,kDCqDSuB,EAzDA,SAACC,GAAW,IAAD,EACEJ,oBAAS,GADX,mBACjBK,EADiB,UAYxB,OACE,yBACEzB,UAAS,yDACPyB,EAAQ,iBAAmB,cADpB,MAKT,4BACEzB,UAAU,iBACV0B,KAAK,SACLC,cAAY,WACZC,cAAY,uBACZC,gBAAc,sBACdC,gBAAc,QACd3B,aAAW,qBAEX,0BAAMH,UAAU,yBAGlB,yBAAKA,UAAU,2BAA2BkB,GAAG,uBAC3C,wBAAIlB,UAAU,mCAEZ,wBAAIA,UAAU,YACZ,uBACEA,UAAU,gBACVC,KAAM8B,2BAMV,wBAAI/B,UAAU,YACZ,uBACEA,UAAU,gBACVC,KAAM8B,wBAEN,8CCtCRC,EAAO,WACX,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QAcSC,EATH,kBACV,kBAAC,IAAD,CAAeC,SAAUH,gBACtBI,KAAqB,kBAAC,EAAD,MACtB,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWN,IAEjC,kBAAC,EAAD,QChBgBO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.55047e75.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Typist from \"react-typist\";\nimport {\n  devDesc,\n  icons,\n} from \"../../editable-stuff/configurations.json\";\n\nconst MainBody = () => {\n  // const [backgroundType, setBackgroundType] = useState(Configs.backgroundType);\n  // const [hoverstatus, setHoverstatus] = useState(\n  //   new Array(icons.length).fill(\"socialicons\")\n  // );\n\n  // const toggleHover = (data) => {\n  //   const newhoverStatus = [...hoverstatus];\n\n  //   if (data.event === \"enter\")\n  //   {\n  //     newhoverStatus[data.icon.id] = \"socialiconshover\";\n  //     return setHoverstatus(newhoverStatus);\n  //   } else if (data.event === \"leave\")\n  //   {\n  //     newhoverStatus[data.icon.id] = \"socialicons\";\n  //     return setHoverstatus(newhoverStatus);\n  //   }\n  // };\n\n  return (\n    <div>\n      <div\n        // id=\"home\"\n        className=\"title jumbotron jumbotron-fluid bg-transparent bgstyle text-light min-vh-100 d-flex align-content-center align-items-center flex-wrap m-0\"\n      >\n        {/* <div id=\"stars\"></div> */}\n        <div className=\"container container-fluid text-center \">\n          <h1 className=\"display-3\">\n            I am Hawa Ko Reporter\n          </h1>\n          <Typist className=\"lead\">\n\n            A messaging tool that engages people on emergence of air pollution and how to respond to it going forward.\n             </Typist>\n          <br />\n          <span>Text me on</span> <br />\n          <a\n            className=\"btn btn-outline-light btn-lg\"\n            href=\"https://www.facebook.com/hawakoreporter/\"\n            role=\"button\"\n            aria-label=\"Text on Messenger\"\n            target=\"_blank\"\n            rel='noopener noreferrer'\n            style={{\n              width: '124px'\n            }}\n          >\n            Messenger\n          </a>\n          <span> </span>\n          <a\n            className=\"btn btn-outline-light btn-lg\"\n            href=\"#aboutme\"\n            role=\"button\"\n            aria-label=\"Text on Viber\"\n            style={{\n              width: '124px'\n            }}\n          >\n            Viber\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MainBody;\n","import React, { Component } from 'react';\nimport { VerticalTimeline, VerticalTimelineElement } from 'react-vertical-timeline-component';\nimport 'react-vertical-timeline-component/style.min.css';\n\nclass TimelineComponent extends Component {\n    render() {\n        return (\n            <VerticalTimeline>\n                <VerticalTimelineElement\n                    className=\"vertical-timeline-element--work\"\n                    contentStyle={{ background: 'rgb(33, 150, 243)', color: '#fff' }}\n                    contentArrowStyle={{ borderRight: '7px solid  rgb(33, 150, 243)' }}\n                    date=\"2020 March\"\n                // iconStyle={{ background: 'rgb(33, 150, 243)', color: '#fff' }}\n                // icon={<WorkIcon />}\n                >\n                    <p>\n                        Funded\n    </p>\n                </VerticalTimelineElement>\n                <VerticalTimelineElement\n                    className=\"vertical-timeline-element--work\"\n                    date=\"2020 January\"\n                // iconStyle={{ background: 'rgb(33, 150, 243)', color: '#fff' }}\n                // icon={<WorkIcon />}\n                >\n                    <p>\n                        Submitted Proposal to The World Bank\n    </p>\n                </VerticalTimelineElement>\n                <VerticalTimelineElement\n                    className=\"vertical-timeline-element--work\"\n                    date=\"2019 Dec 13 - 2019 Dec 14\"\n                // iconStyle={{ background: 'rgb(33, 150, 243)', color: '#fff' }}\n                // icon={<WorkIcon />}\n                >\n\n                    <p>\n                        First Demo Released\n    </p>\n                </VerticalTimelineElement>\n                <VerticalTimelineElement\n                    iconStyle={{ background: 'rgb(16, 204, 82)', color: '#fff' }}\n                // icon={<StarIcon />}\n                />\n            </VerticalTimeline>\n        )\n    }\n}\n\nexport default TimelineComponent\n","import React from \"react\";\n\nimport TimelineComponent from './TimelineComponent'\n\n\nconst AboutMe = () => {\n\n  return (\n    <div id=\"aboutme\" className=\"jumbotron jumbotron-fluid m-0\">\n      <div className=\"container container-fluid p-5\">\n        <div className=\"row\">\n\n          <div className=\"col-5 d-none d-lg-block align-self-center\">\n            <h2 className=\"display-5 mb-3 text-center\">Project Timeline</h2>\n            <TimelineComponent />\n          </div>\n\n          <div className='col-lg-7'>\n            <h2 className=\"display-5 mb-3 text-center\">About Me</h2>\n            {/* <p className=\"lead text-center\">I work by allowing users to subscribe to air quality information on geographic areas they care about. The subscribers get daily air quality reports along with health recommendations. Going forward, subscribers are queried if they decided to follow the recommendation, are given tips to reduce their footprint. The data and insights are shared back with communities.</p> */}\n            <p className=\"lead text-center\">\n              A group of students and ethusiasts came together..... Solvethon 2019...\n          </p>\n            <p className=\"lead text-center\">\n              <a\n\n                className=\"btn btn-outline-dark btn-lg\"\n                href=\"#\"\n                target=\"_blank\"\n                rel=\"noreferrer noopener\"\n                role=\"button\"\n                aria-label=\"Learn More\"\n              >\n                Learn More\n                </a>\n            </p>\n\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AboutMe;\n","import React, { useState } from \"react\";\n\nconst Footer = () => {\n  const [bgStyle] = useState({ backgroundColor: \"#f5f5f5\" });\n\n  return (\n    <footer style={bgStyle} className=\"text-center\">\n      <strong> &copy; 2020 </strong>\n      <p> Hawa Ko Reporter</p>\n      {/* <a\n        className=\"badge \"\n        rel=\"noopener\"\n        href=\"https://github.com/hashirshoaeb\"\n        aria-label=\"My GitHub\"\n      >\n        Hawa Ko Reporter\n      </a>{\" \"} */}\n      {/* using <i className=\"fab fa-react\"></i> */}\n\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n\nconst Navbar = (props) => {\n  const [isTop, setIsTop] = useState(true);\n  // useEffect(() => {\n  //   document.addEventListener(\"scroll\", () => {\n  //     const istop = window.scrollY < 200;\n  //     if (istop !== isTop)\n  //     {\n  //       setIsTop(istop);\n  //     }\n  //   });\n  // }, [isTop]);\n\n  return (\n    <nav\n      className={`navbar navbar-expand-lg fixed-top navbar-light ${\n        isTop ? \"bg-transparent\" : \"bg-gradient\"\n        } `}\n    >\n\n      <button\n        className=\"navbar-toggler\"\n        type=\"button\"\n        data-toggle=\"collapse\"\n        data-target=\"#navbarTogglerDemo02\"\n        aria-controls=\"navbarTogglerDemo02\"\n        aria-expanded=\"false\"\n        aria-label=\"Toggle navigation\"\n      >\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n\n      <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\n        <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\n\n          <li className=\"nav-item\">\n            <a\n              className=\"nav-link lead\"\n              href={process.env.PUBLIC_URL + \"/#projects\"}\n            >\n\n            </a>\n          </li>\n\n          <li className=\"nav-item\">\n            <a\n              className=\"nav-link lead\"\n              href={process.env.PUBLIC_URL + \"/#aboutme\"}\n            >\n              <b>Read Blog</b>\n            </a>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React, { Fragment } from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\nimport \"./App.css\";\nimport {\n  showNavigationbar\n} from \"./editable-stuff/configurations.json\";\nimport MainBody from \"./components/home/MainBody\";\nimport AboutMe from \"./components/home/AboutMe\";\nimport Footer from \"./components/Footer\";\nimport Navbar from \"./components/Navbar\";\n\n\nconst Home = () => {\n  return (\n    <Fragment>\n      <MainBody />\n      <AboutMe />\n    </Fragment>\n  );\n};\n\nconst App = () => (\n  <BrowserRouter basename={process.env.PUBLIC_URL + \"/\"}>\n    {showNavigationbar && <Navbar />}\n    <Route path=\"/\" exact component={Home} />\n\n    <Footer />\n  </BrowserRouter>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let\"s check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can\"t reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}